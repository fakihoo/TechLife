@model TechLife.ViewModels.ProductViewModel

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet">
<style>
    .carousel-item img {
        max-height: 500px;
        object-fit: contain;
    }

    .like-view-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 10px;
    }

    .like-button {
        width: 140px;
        height: 35px;
        display: flex;
        align-items: center;
        justify-content: flex-start;
        border: none;
        border-radius: 5px;
        overflow: hidden;
        box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.089);
        cursor: pointer;
        background-color: transparent;
    }

    .leftContainer {
        width: 60%;
        height: 100%;
        background-color: rgb(238, 0, 0);
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

        .leftContainer .like {
            color: white;
            font-weight: 600;
        }

    .likeCount {
        width: 40%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: rgb(238, 0, 0);
        font-weight: 600;
        position: relative;
        background-color: white;
    }

        .likeCount::before {
            height: 8px;
            width: 8px;
            position: absolute;
            content: "";
            background-color: rgb(255, 255, 255);
            transform: rotate(45deg);
            left: -4px;
        }

    .like-button:hover .leftContainer {
        background-color: rgb(219, 0, 0);
    }

    .like-button:active .leftContainer {
        background-color: rgb(201, 0, 0);
    }

        .like-button:active .leftContainer svg {
            transform: scale(1.15);
            transform-origin: top;
        }
    /* New style for p elements */
    .offer-description p {
        font-size: 1.25rem; /* Adjust the size as needed */
        line-height: 1.5; /* Adjust line height for better readability */
        color: black;
    }
</style>

<div class="container my-4">
    <div class="row">
        <div class="col-md-8">
            <div id="carouselExampleControls" class="carousel slide" data-bs-ride="carousel">
                <div class="carousel-inner">
                    @for (int i = 0; i < Model.Images.Count; i++)
                    {
                        <div class="carousel-item @(i == 0 ? "active" : "")">
                            <img src="@Model.Images[i].Url" class="d-block w-100" alt="Product Image">
                        </div>
                    }
                </div>
                <a class="carousel-control-prev" href="#carouselExampleControls" role="button" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </a>
                <a class="carousel-control-next" href="#carouselExampleControls" role="button" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </a>
            </div>
            <div class="like-view-container mt-4">
                <div class="col-md-4">
                    <form asp-controller="Product" asp-action="LikeProduct" method="post">
                        <input type="hidden" name="productId" value="@Model.Id" />
                        <button type="submit" class="like-button" data-liked="@Model.IsLiked">
                            <span class="leftContainer">
                                <svg fill="white" viewBox="0 0 512 512" height="1em" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M47.6 300.4L228.3 469.1c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9L464.4 300.4c30.4-28.3 47.6-68 47.6-109.5v-5.8c0-69.9-50.5-129.5-119.4-141C347 36.5 300.6 51.4 268 84L256 96 244 84c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5z"></path>
                                </svg>
                                <span class="like">Like</span>
                            </span>
                            <span class="likeCount">
                                @Model.Likes
                            </span>
                        </button>
                    </form>
                </div>
                <div class="col-md-4 text-center">
                    Views: @Model.Views
                </div>
            </div>
            <div class="row mt-4 offer-description">
                <div class="col-md-12">
                    <h5>Description</h5>
                    <p>@Model.Description</p>
                    <h5>Condition</h5>
                    <p>@Model.Condition</p>
                    <h5>Contact</h5>
                    <p>@Model.Contact</p>
                    <h5>Location</h5>
                    <p>@Model.Location</p>
                    <p class="card-text">Uploaded: @Model.UploadedAt.ToLocalTime().ToString("g")</p>
                    <p class="card-text">
                        @if (Model.UploadedAt != DateTime.MinValue)
                        {
                            var timeSinceUpload = DateTime.Now.Subtract(Model.UploadedAt);
                            if (timeSinceUpload.TotalDays > 1)
                            {
                                <span>@timeSinceUpload.Days days ago</span>
                            }
                            else if (timeSinceUpload.TotalHours > 1)
                            {
                                <span>@timeSinceUpload.Hours hours ago</span>
                            }
                            else
                            {
                                <span>@timeSinceUpload.Minutes minutes ago</span>
                            }
                        }
                    </p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-body text-center">
                    <img src="@Model.UserProfilePictureUrl" class="rounded-circle mb-3" alt="Profile Picture" style="width: 100px; height: 100px;">
                    <h5 class="card-title">@Model.UserEmail</h5>
                    <a asp-area="Customer" asp-controller="Product" asp-action="MyProducts" asp-route-userId="@Model.UserId" class="btn btn-primary">Check Profile</a>
                </div>
            </div>
            <div class="mt-4">
                <canvas id="priceComparisonChart"></canvas>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var currentProductId = '@Model.Id'; // Get the ID of the current product
        var currentProductTitle = '@Model.Title'; // Get the title of the current product

        fetch('/Customer/Product/GetProductPrices?title=' + encodeURIComponent(currentProductTitle))
            .then(response => response.json())
            .then(data => {
                console.log(data); // Debug: log fetched data

                var ctx = document.getElementById('priceComparisonChart').getContext('2d');

                // Map the data for the chart
                var prices = data.map((item, index) => ({
                    x: index,
                    y: item.price,
                    productId: item.id,
                    title: item.title // Include the title in the data
                }));

                // Log prices for debugging
                console.log("Mapped prices:", prices);

                // Find the index of the current product in the dataset
                var currentIndex = prices.findIndex(p => p.productId == currentProductId);

                console.log("Current Product Index:", currentIndex);

                var chart = new Chart(ctx, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Prices of Similar Products',
                            data: prices,
                            backgroundColor: prices.map((item, index) => index === currentIndex ? 'rgba(255, 99, 132, 0.2)' : 'rgba(54, 162, 235, 0.2)'),
                            borderColor: prices.map((item, index) => index === currentIndex ? 'rgba(255, 99, 132, 1)' : 'rgba(54, 162, 235, 1)'),
                            borderWidth: 1,
                            pointRadius: prices.map((item, index) => index === currentIndex ? 8 : 5),
                            pointHoverRadius: 10
                        }]
                    },
                    options: {
                        onClick: (event, elements) => {
                            if (elements.length > 0) {
                                const firstPoint = elements[0];
                                const clickedIndex = firstPoint.index;
                                const productId = chart.data.datasets[firstPoint.datasetIndex].data[clickedIndex].productId;

                                // Debug: Check productId
                                console.log("Clicked Product ID:", productId);

                                // Redirect to the CheckOffer view of the clicked product
                                if (productId) {
                                    window.location.href = `/Customer/Product/CheckOffer?id=${productId}`;
                                }
                            } else {
                                console.log("No elements clicked.");
                            }
                        },
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'Product Index'
                                }
                            },
                            y: {
                                title: {
                                    display: true,
                                    text: 'Price (in USD)'
                                }
                            }
                        },
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    title: function (tooltipItems) {
                                        // Display the product title when hovering over the data point
                                        return `Title: ${tooltipItems[0].raw.title}`;
                                    },
                                    label: function (tooltipItem) {
                                        return `Price: $${tooltipItem.raw.y}`;
                                    }
                                }
                            }
                        }
                    }
                });
            })
            .catch(error => console.error('Error fetching product prices:', error));
    });
</script>


